name: Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - prereleased
      - released
  workflow_dispatch:
    inputs:
      version:
        description: Application version to use when publishing the project
        required: false

env:
  # Setting these variables allows .NET CLI to use rich color codes in console output
  TERM: xterm
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
  # Skip boilerplate output
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

# Note that as much as we'd love to avoid repetitive work, splitting the pipeline into separate jobs
# makes it very difficult to share artifacts between them. Even if we succeed, we'll still end up
# pushing and pulling gigabytes worth of data, which makes the jobs so much slower that we might as
# well just repeat the checkout-restore-build steps instead.

# Having a setup that involves separate jobs gives us significant benefits, on the other hand, namely:
# - Most of the jobs can run in parallel, which reduces the overall execution time significantly,
#   despite the repetitive work.
# - We can catch more issues this way, for example if the formatting job fails, we can still see the
#   the test results too.
# - If one of the jobs fails due to reasons unrelated to our code (e.g. NuGet server is down), we get
#   the option to rerun only that job, saving us time.
# - It's easier to understand what each job does (and later, read its output) because the scope is much
#   more narrow.
# - We can set permissions on a more granular (per-job) level, which allows us to expose only a few select
#   steps to more sensitive access scopes.

jobs:
  # Determine version
  version:
    name: Determine version
    runs-on: ubuntu-24.04
    permissions:
      contents: read

    steps:
      - name: Determine stable version
        id: stable-version
        if: ${{ inputs.version || github.event_name == 'release' }}
        env:
          VERSION: ${{ inputs.version || github.event.release.tag_name }}
        run: |
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z].*)?$ ]]; then
              echo "Invalid version: $VERSION"
              exit 1
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Determine prerelease version
        id: pre-version
        run: |
          hash="${{ github.event.pull_request.head.sha || github.sha }}"
          echo "version=0.0.0-ci-${hash:0:7}" >> "$GITHUB_OUTPUT"

    outputs:
      version: ${{ steps.stable-version.outputs.version || steps.pre-version.outputs.version }}

  # Check formatting
  format:
    name: Validate format
    runs-on: ubuntu-24.04
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install .NET
        uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0

      - name: Validate format
        run: dotnet format --verify-no-changes

  # Run tests
  test:
    name: Run tests
    runs-on: ubuntu-24.04
    permissions:
      checks: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install .NET
        uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0

      - name: Run restore
        run: dotnet restore

      - name: Run build
        run: >
          dotnet build
          --no-restore
          --configuration Release

      - name: Run tests
        # The next step will fail if any tests fail, but we still want to publish the results
        continue-on-error: true
        run: >
          dotnet test
          --no-restore
          --no-build
          --configuration Release
          --logger "trx;LogFileName=pw-test-results.trx"
          --collect:"XPlat Code Coverage"
          --
          RunConfiguration.CollectSourceInformation=true
          DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        env:
          ASPNETCORE_ENVIRONMENT: Development # For Serilog passthrough

      - name: Report test results
        uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3 # v2.1.1
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && !cancelled() }}
        with:
          name: Test Results
          path: "**/*-test-results.trx"
          reporter: dotnet-trx
          fail-on-error: true

      - name: Upload to codecov.io
        uses: codecov/codecov-action@13ce06bfc6bbe3ecf90edbbf1bc32fe5978ca1d3 # v5.3.1

  # Publish the apps
  pack:
    name: Pack apps
    needs: version

    strategy:
      matrix:
        app:
          - Api
          - AdminConsole

    runs-on: ubuntu-24.04
    permissions:
      actions: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Install .NET
        uses: actions/setup-dotnet@3951f0dfe7a07e2313ec93c75700083e2005cbab # v4.3.0

      - name: Install NodeJS
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: lts/*

      - name: Publish app
        env:
          VERSION: ${{ needs.version.outputs.version }}
        run: >
          dotnet publish "src/${{ matrix.app }}/"
          -p:Version="${VERSION}"
          --configuration Release
          --runtime win-x86
          --no-self-contained
          --output "src/${{ matrix.app }}/publish/"

      - name: Upload artifacts
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: ${{ matrix.app }}
          path: src/${{ matrix.app }}/publish/

  # Dispatches a separate deployment workflow in a private repository
  deploy:
    name: Request Deploy
    if: ${{ github.event_name != 'pull_request' }}

    needs:
      - version
      - format
      - test
      - pack

    strategy:
      matrix:
        environment:
          - devtest
          - qa
          - prod
        exclude:
          # Deploy to QA on pre-releases and stable releases
          - environment: ${{ !(github.event_name == 'release') && 'qa' }}
          # Deploy to PROD on stable release only
          - environment: ${{ !(github.event_name == 'release' && github.event.action == 'released') && 'prod' }}
          # Deploy to DEVTEST every time

    runs-on: ubuntu-24.04
    permissions:
      id-token: write

    steps:
      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Get Azure Key Vault secrets
        id: get-kv-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: gh-org-bitwarden
          secrets: "BW-GHAPP-ID,BW-GHAPP-KEY"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main
      
      - name: Generate GH App token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        id: app-token
        with:
          app-id: ${{ steps.get-kv-secrets.outputs.BW-GHAPP-ID }}
          private-key: ${{ steps.get-kv-secrets.outputs.BW-GHAPP-KEY }}
          owner: bitwarden
          repositories: passwordless-devops

      - name: Dispatch deployment
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          VERSION: ${{ needs.version.outputs.version }}
        run: >
          gh workflow run deploy-passwordless-server.yml
          --repo bitwarden/passwordless-devops
          --field repository="${GITHUB_REPOSITORY}"
          --field run-id="${GITHUB_RUN_ID}"
          --field api-artifact="Api"
          --field admin-console-artifact="AdminConsole"
          --field environment="${{ matrix.environment }}"
          --field version="${VERSION}"
