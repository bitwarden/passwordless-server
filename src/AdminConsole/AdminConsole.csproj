<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <UserSecretsId>passwordless-adminconsole</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Azure.Extensions.AspNetCore.DataProtection.Keys" Version="1.2.4" />
    <PackageReference Include="Azure.Identity" Version="1.13.1" />
    <PackageReference Include="Datadog.Trace" Version="3.2.0" />
    <PackageReference Include="Humanizer.Core" Version="2.14.1" />
    <PackageReference Include="Microsoft.AspNetCore.DataProtection.EntityFrameworkCore" Version="8.0.10" />
    <PackageReference Include="Microsoft.AspNetCore.Identity" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.10">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="8.0.10" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="8.0.10" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.UI" Version="8.0.10" />
    <PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore" Version="8.0.10" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="8.0.2" />
    <PackageReference Include="Microsoft.FeatureManagement.AspNetCore" Version="3.5.0" />
    <PackageReference Include="Passwordless.AspNetCore" Version="2.1.0-beta.4" />
    <PackageReference Include="Stripe.net" Version="41.*" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Common\Common.csproj" />
  </ItemGroup>

  <ItemGroup>
    <None Include="Services\AuthenticatorData\authenticator-data.json" CopyToOutputDirectory="Always" />
  </ItemGroup>

  <!-- The official documentation for scoped CSS files briefly mentions preprocessors and suggests integrating them with
  a "Before Build" task in Visual Studio's Task Runner. This integration is basic, and an alternative approach is needed
  for integration with dotnet watch. To understand the build process, use the verbose output of dotnet build to identify
  suitable MSBuild targets for custom CSS preprocessing logic.

  The target _GenerateScopedCssFiles has been identified. Custom build steps can be integrated after this target. This
  code iterates over all generated scoped CSS files, invoking the Tailwind CLI for each file. Key points include:

  - The output file name (-o) is identical to the input file name (-i), overwriting the source file. This is necessary
  as subsequent build steps rely on this exact file name.
  - An environment variable ensures Tailwind performs a one-off build, even in JIT mode, without the Node environment
  set to production. More details are available in the official documentation.

  Running dotnet watch run ensures that scoped CSS styles, including Tailwind-specific classes and directives, are
  transformed into browser-compatible CSS during the build. Any changes to scoped CSS files, such as modifications to
  navigation bar styles, will trigger the dotnet watcher to pick up the changes, execute the required MSBuild targets,
  and apply the custom logic. The automated browser reload will reflect these changes. -->
  <Target Name="ProcessScopedCssFilesWithTailwind" AfterTargets="_GenerateScopedCssFiles">
    <Exec Command="npm ci" />
    <MSBuild Projects="$(MSBuildProjectFile)"
             Properties="CurrentScopedCssFile=%(_ScopedCssOutputs.Identity)"
             Targets="ProcessScopedCssFileWithTailwind">
    </MSBuild>
  </Target>

  <Target Name="ProcessScopedCssFileWithTailwind">
    <Message Importance="high"
             Text="Processing with Tailwind: $(CurrentScopedCssFile)" />
    <Exec Command="npx tailwindcss -i $(CurrentScopedCssFile) -o $(CurrentScopedCssFile)"
          WorkingDirectory="$(MSBuildProjectDirectory)"
          EnvironmentVariables="TAILWIND_MODE=build" />
  </Target>

  <Target Name="Run NPM Build" AfterTargets="PostBuildEvent">
    <Exec Command="npm run build" />

    <!-- Passwordless.dev Javascript Client -->
    <Copy SourceFiles="node_modules\@passwordlessdev\passwordless-client\dist\umd\passwordless.umd.min.js" DestinationFolder="wwwroot\lib\passwordless\" />

    <!-- Apex Charts -->
    <Copy SourceFiles="node_modules\apexcharts\dist\apexcharts.min.js" DestinationFolder="wwwroot\lib\apexcharts\" />
    <Copy SourceFiles="node_modules\apexcharts\dist\apexcharts.css" DestinationFolder="wwwroot\lib\apexcharts\" />

    <!-- ES Module Shims -->
    <Copy SourceFiles="node_modules\es-module-shims\dist\es-module-shims.js" DestinationFolder="wwwroot\lib\es-module-shims\" />

    <!-- Vue.js -->
    <Copy Condition="'$(Configuration)' == 'Debug'" SourceFiles="node_modules\vue\dist\vue.esm-browser.js" DestinationFiles="wwwroot\lib\vue\vue.mjs" />
    <Copy Condition="'$(Configuration)' == 'Release'" SourceFiles="node_modules\vue\dist\vue.esm-browser.prod.js" DestinationFiles="wwwroot\lib\vue\vue.mjs" />
  </Target>
</Project>
